#**
  * Hides the element that will be replaced by the WYSIWYG editor and shows the loading animation instead.
  *
  * @param $fieldId identifies the form field that will be replaced by the WYSIWYG editor
  *#
#macro(wysiwyg_hide $fieldId)
<script type="text/javascript">
//<![CDATA[
(function() {
  var field = document.getElementById('$!{fieldId}');
  if (field) {
    // Hide the element that will be wrapped by the WYSIWYG editor.
    field.style.visibility = 'hidden';
    // Show the loading animation.
    var loading = document.createElement('span');
    loading.className = 'loading';
    loading.style.display = 'block';
    loading.style.position = 'absolute';
    loading.style.width = field.offsetWidth + 'px';
    loading.style.height = field.offsetHeight + 'px';
    field.parentNode.insertBefore(loading, field);
    var removeLoadingAnimation = function() {
      // Remove the loading animation after the editor code has been loaded or if it can't be loaded.
      var callback = function() {
        loading.parentNode.removeChild(loading);
      };
      if (typeof Wysiwyg == 'object' && Wysiwyg) {
        Wysiwyg.onModuleLoad(callback);
      } else {
        field.style.visibility = 'visible';
        callback();
      }
      return true;
    };
    (XWiki.domIsLoaded && removeLoadingAnimation()) || document.observe('xwiki:dom:loaded', removeLoadingAnimation);
  }
})(XWiki || {});
//]]>
</script>
#end

#**
  * Imports the JavaScript files required by the WYSIWYG editor.
  *
  * @param $lazy {@code true} to download the WYSIWYG code only when it is needed, {@code false} to download it when the page is loaded
  *#
#macro(wysiwyg_import $lazy)
## Load the CSS of the tree used by the Create Link Wizard (the JavaScript code is loaded with Require.js).
$xwiki.linkx.use($services.webjars.url('org.xwiki.platform:xwiki-platform-tree-webjar', 'tree.min.css',
  {'evaluate': true}), {'type': 'text/css', 'rel': 'stylesheet'})
$xwiki.linkx.use($services.webjars.url('org.xwiki.platform:xwiki-platform-tree-webjar', 'finder.min.css',
  {'evaluate': true}), {'type': 'text/css', 'rel': 'stylesheet'})
## We use directly FontAwesome for the tree node icons for two reasons:
## * the XWiki icon set (available through the icon themes) is limited
## * jsTree expects an URL/path or a CSS class name as the value of the tree node icon configuration when JSON source is
##   used; the icon theme API is currently only able to render an icon but there's no way to get the icon configuration
##   as jsTree expects it. The alternative is to use the HTML source to feed the tree but then the tree definition and
##   configuration becomes complex.
## We don't load the FontAwesome CSS directly from its WebJar because it contains some relative paths that currently are
## not handled correctly by the WebJar action. This has been fixed in the FontAwesome icon theme so we load the theme
## SSX instead.
$xwiki.ssx.use('IconThemes.FontAwesome')
## Include also the fix for the FontAwesome loading issue on IE8.
$xwiki.jsx.use('IconThemes.FontAwesome')
$xwiki.jsfx.use("js/xwiki/wysiwyg/xwe/XWikiWysiwyg.js", {'forceSkinAction': true, 'lazy': $lazy})
#end

#**
  * Displays the ConversionFilter error for the specified field, if any. The ConversionFilter is executed before the
  * SaveAction and converts the HTML output of all the WYSIWYG editors to the corresponding storage syntax. If the
  * ConversionFilter catches any exception during the convesion then it redirects the request back preventing the user
  * from loosing unsaved changes and allowing us to display the exception.
  *
  * @param $parameters WYSIWYG editor configuration parameter map including the id of the field for which to display the
  *                    conversion errors
  *#
#macro(wysiwyg_displayConversionError $parameters)
#set($fieldId = $parameters.hookId)
#if("$!{request.key}" != "")
#set($sessionErrors = $request.getSession().getAttribute("com.xpn.xwiki.wysiwyg.server.converter.errors"))
#if($sessionErrors && $sessionErrors.containsKey($request.key))
#set($requestErrors = $sessionErrors.get($request.key))
#if($requestErrors && $requestErrors.containsKey($fieldId))
#set($fieldError = $requestErrors.get($fieldId))
#if($fieldError)
#set($ok = $parameters.put('inputURL', $editedDocument.getURL('edit', $escapetool.url({
  'xpage': 'wysiwyginput',
  'token': $services.csrf.token,
  'key': $request.key,
  'field': $fieldId
}))))
#error("${fieldId}: ${fieldError.message}")
#set($ok = $requestErrors.remove($fieldId))
#if($requestErrors.isEmpty())
#set($ok = $sessionErrors.remove($request.key))
#end
#end
#end
#end
#end
#end

#**
  * Creates the input hidden whose value will be used to cache the state of the WYSIWYG editor in order to preserve it
  * when the user navigates away from the edit page and restore it when the user comes back.
  *
  * @param $parameters WYSIWYG editor configuration parameter map to put the cache id in
  *#
#macro(wysiwyg_createCache $parameters)
#set($ok = $parameters.put('cacheId', "wysiwygCache$!{util.generateRandomString(4)}"))
## HACK: We use a text input hidden through CSS instead of a hidden input because Chrome doesn't cache hidden inputs.
## See http://code.google.com/p/chromium/issues/detail?id=105362
<label for="$!{parameters.cacheId}" class="hidden"><input type="text" id="$!{parameters.cacheId}"/></label>
#end

#**
  * Writes the WYSIWYG configuration parameters to a JavaScript variable.
  *
  * @param $jsVarName the name of the JavaScript variable to write the WYSIWYG configuration parameter to
  * @param $parameters WYSIWYG editor configuration parameters
  *#
#macro(wysiwyg_writeConfig $jsVarName $parameters)
<script type="text/javascript">
//<![CDATA[
var $jsVarName = {
#set($separator = '')
#foreach($entry in $parameters.entrySet())
#if($entry.value || "$!entry.value" != '')
  ${separator}$entry.key: '$!{escapetool.javascript($entry.value)}'
#set($separator = ',')
#end
#end
};
//]]>
</script>
#end

#**
  * Stores the WYSIWYG configuration in a map of (parameter, value) pairs.
  *
  * @param $parameters the map of parameters where the WYSIWYG configuration will be stored
  * @param $editedDocument the document being edited
  * @param $fieldId identifies the form field to be replaced by the WYSIWYG editor
  * @param $full {@code true} to use a fully-fledged editor, {@code false} to use the compact editor
  *#
#macro(wysiwyg_storeConfig $parameters $editedDocument $fieldId $full)
#if(!$parameters.containsKey('hookId'))
  #set($ok = $parameters.put('hookId', $fieldId))
#end
#set($ok = $parameters.put('syntax', $editedDocument.syntax.toIdString()))
#set($ok = $parameters.put('convertInput', true))
#set($ok = $parameters.put('inputURL', $editedDocument.getURL('edit', $escapetool.url({
  'xpage': 'wysiwyginput',
  'token': $services.csrf.token,
  'skin': $xwiki.getSkin()
}))))
#if($full)
  #set($ok = $parameters.put('displayTabs', $services.wysiwyg.config.isSourceEditorEnabled()))
  #if($parameters.displayTabs)
    #set($ok = $parameters.put('defaultEditor', 'wysiwyg'))
  #end
#end
#set($ok = $parameters.put('plugins', $services.wysiwyg.config.getPlugins()))
#set($ok = $parameters.put('menu', $services.wysiwyg.config.getMenuBar()))
#set($ok = $parameters.put('toolbar', $services.wysiwyg.config.getToolBar()))
#if ("$!services.wysiwyg.config.isPasteContentCleanedAutomatically()" == 'false')
  #set ($ok = $parameters.put('cleanPaste', 'false'))
#end
#if("$!services.wysiwyg.config.isAttachmentSelectionLimited()" == 'true')
  #set($ok = $parameters.put('linkfiles', 'currentpage'))
#end
#set($ok = $parameters.put('allowExternalImages', $services.wysiwyg.config.areExternalImagesAllowed()))
#if("$!services.wysiwyg.config.isImageSelectionLimited()" == 'true')
  #set($ok = $parameters.put('insertimages', 'currentpage'))
#end
#set($ok = $parameters.put('colors', $services.wysiwyg.config.getColorPalette()))
#set($ok = $parameters.put('colorsPerRow', $services.wysiwyg.config.getColorsPerRow()))
#set($ok = $parameters.put('fontNames', $services.wysiwyg.config.getFontNames()))
#set($ok = $parameters.put('fontSizes', $services.wysiwyg.config.getFontSizes()))
#set($ok = $parameters.put('styleNames', $services.wysiwyg.config.getStyleNames()))
#set($ok = $parameters.put('historySize', $services.wysiwyg.config.getHistorySize()))
#set($ok = $parameters.put('wiki', $editedDocument.wiki))
#set($ok = $parameters.put('space', $editedDocument.space))
#set($ok = $parameters.put('page', $editedDocument.name))
#if("$!{services.officemanager.serverState}" == 'Connected')
  #set($ok = $parameters.put('openofficeServerConnected', 'true'))
#end
#if($full && $request.sync)
  #set($ok = $parameters.put('syncPage', $editedDocument.fullName))
  #if("$!{request.reset}" != '')
    #set($ok = $parameters.put('syncReset', $request.reset))
  #end
#end
#if("$!request.debug" != '')
  #set($ok = $parameters.put('debug', $request.debug))
#end
#set($ok = $parameters.put('documentTreeURL', $xwiki.getURL('XWiki.DocumentTree', 'get', $escapetool.url({
  'outputSyntax': 'plain',
  'showAddDocument': true,
  'showTranslations': false,
  'showAttachments': false
}))))
#set($ok = $parameters.put('attachmentTreeURL', $xwiki.getURL('XWiki.DocumentTree', 'get', $escapetool.url({
  'outputSyntax': 'plain',
  'showTranslations': false,
  'showAddAttachment': true
}))))
#end

#**
  * Creates a new WYSIWYG editor instance using the given configuration parameters.
  *
  * @param $parameters WYSIWYG editor configuration parameters
  *#
#macro(wysiwyg_createEditor $parameters)
#set($jsVarName = "wysiwygConfig${util.generateRandomString(4)}")
#wysiwyg_writeConfig($jsVarName $parameters)
<script type="text/javascript">
//<![CDATA[
(function() {
  var init = function() {
    // Fail safe if the editor can't be loaded.
    var editorCanBeLoaded = typeof Wysiwyg == 'object' && Wysiwyg;
    editorCanBeLoaded && Wysiwyg.onModuleLoad(function() {
      new WysiwygEditor($jsVarName);
      $jsVarName = undefined;
    });
    return editorCanBeLoaded;
  };
  (XWiki.domIsLoaded && init()) || document.observe('xwiki:dom:loaded', init);
})(XWiki || {});
//]]>
</script>
#end

#**
  * Loads the GWT-based WYSIWYG editor for the specified object property. The special "content" document property is
  * also supported.
  *
  * @param $editedDocument the document whose objects are being edited
  * @param $propertyIds A comma separated list of property identifiers. An example of a property identifier is "XWiki.ArticleClass_0_content".
  * @param $full {@code true} to use a fully-fledged editor, {@code false} to use a compact editor
  *#
#macro(wysiwyg_editProperty $editedDocument $propertyId $full)
#set($parameters = {})
#wysiwyg_storeConfig($parameters $editedDocument $propertyId $full)
#wysiwyg_editPropertyCustom($editedDocument $parameters)
#end

#**
  * Loads the GWT-based WYSIWYG editor for the specified object property, using the given configuration parameters. The
  * special "content" document property is also supported.
  *
  * @param $editedDocument the document whose objects are being edited
  * @param $parameters WYSIWYG editor configuration parameters
  *#
#macro(wysiwyg_editPropertyCustom $editedDocument $parameters)
## Hide the plain text area.
#wysiwyg_hide($parameters.hookId)
## Import required JavaScript files (lazy=false).
#wysiwyg_import(false)
## Display conversion errors, if present.
#wysiwyg_displayConversionError($parameters)
## Create the cache.
#wysiwyg_createCache($parameters)
## Create the editor UI.
#wysiwyg_createEditor($parameters)
#end

#**
  * Loads the GWT-based WYSIWYG editor for the specified object properties, using the default configuration.
  *
  * @param $editedDocument the document whose objects are being edited
  * @param $propertyIds A comma separated list of property identifiers. An example of a property identifier is "XWiki.ArticleClass_0_content".
  * @param $full {@code true} to use a fully-fledged editor, {@code false} to use a compact editor
  *#
#macro(wysiwyg_editProperties $editedDocument $propertyIds $full)
#set($parameters = {})
#wysiwyg_storeConfig($parameters $editedDocument '' $full)
#wysiwyg_editPropertiesCustom($editedDocument $propertyIds $parameters)
#end

#**
  * Loads the GWT-based WYSIWYG editor for the specified object properties, using the given configuration parameters.
  *
  * @param $editedDocument the document whose objects are being edited
  * @param $propertyIds A comma separated list of property identifiers. An example of a property identifier is "XWiki.ArticleClass_0_content".
  * @param $parameters WYSIWYG editor configuration parameters
  *#
#macro(wysiwyg_editPropertiesCustom $editedDocument $propertyIds $parameters)
#set($instanceParameters = {})
#set($ok = $instanceParameters.putAll($parameters))
#set($propertyIds = "$!propertyIds")
#foreach($propertyId in $propertyIds.split(","))
#set($ok = $instanceParameters.put('hookId', $propertyId))
#wysiwyg_editPropertyCustom($editedDocument $instanceParameters)
#end
#end